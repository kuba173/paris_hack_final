// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.17;

contract MatchTokenAuction {

    address public owner;

    struct Auction {
        uint256 matchId;
        string team;
        uint256 endTime;
        address highestBidder;
        uint256 highestStake;
        bool finalized;
        address[] participants;
        address auctionOwner;
    }

    struct AuctionView {
        uint256 matchId;
        string team;
        uint256 endTime;
        address highestBidder;
        uint256 highestStake;
        bool finalized;
        address[] participants;
        uint256[] stakes;
        address auctionOwner;
    }

    uint256 public auctionCount;
    mapping(uint256 => Auction) public auctions;
    mapping(uint256 => mapping(address => uint256)) public userStakes;
    mapping(uint256 => mapping(address => bool)) public hasParticipated;

    event AuctionCreated(uint256 auctionId, uint256 matchId, string team, uint256 endTime);
    event Staked(address indexed user, uint256 auctionId, uint256 amount);
    event AuctionFinalized(uint256 auctionId, address winner, uint256 amount);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid new owner");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    // ❌ Usunięto onlyOwner — teraz każdy może tworzyć aukcje
    function createAuction(uint256 matchId, string memory team, uint256 durationInSeconds) public {
        uint256 endTime = block.timestamp + durationInSeconds;
        address[] memory emptyParticipants;

        auctions[auctionCount] = Auction({
            matchId: matchId,
            team: team,
            endTime: endTime,
            highestBidder: address(0),
            highestStake: 0,
            finalized: false,
            participants: emptyParticipants,
            auctionOwner: address(0)
        });

        emit AuctionCreated(auctionCount, matchId, team, endTime);
        auctionCount++;
    }

    function stake(uint256 auctionId) public payable {
        Auction storage a = auctions[auctionId];
        require(!a.finalized, "Auction already finalized");
        require(block.timestamp < a.endTime, "Auction ended");

        if (!hasParticipated[auctionId][msg.sender]) {
            a.participants.push(msg.sender);
            hasParticipated[auctionId][msg.sender] = true;
        }

        userStakes[auctionId][msg.sender] += msg.value;

        if (userStakes[auctionId][msg.sender] > a.highestStake) {
            a.highestStake = userStakes[auctionId][msg.sender];
            a.highestBidder = msg.sender;
        }

        emit Staked(msg.sender, auctionId, msg.value);
    }

    // ❗ Nadal wymaga bycia właścicielem – jeśli chcesz, mogę też otworzyć to dla każdego
    function finalizeAuction(uint256 auctionId) public onlyOwner {
        Auction storage a = auctions[auctionId];
        require(!a.finalized, "Already finalized");

        a.finalized = true;
        a.auctionOwner = a.highestBidder;

        for (uint256 i = 0; i < a.participants.length; i++) {
            address user = a.participants[i];
            if (user != a.highestBidder) {
                uint256 refund = userStakes[auctionId][user];
                if (refund > 0) {
                    userStakes[auctionId][user] = 0;
                    payable(user).transfer(refund);
                }
            }
        }

        emit AuctionFinalized(auctionId, a.highestBidder, a.highestStake);
    }

    function getUserStake(uint256 auctionId, address user) public view returns (uint256) {
        return userStakes[auctionId][user];
    }

    function getHighestStake(uint256 auctionId) public view returns (address, uint256) {
        Auction memory a = auctions[auctionId];
        return (a.highestBidder, a.highestStake);
    }

    function withdraw() public onlyOwner {
        payable(owner).transfer(address(this).balance);
    }

    function getAllAuctions() public view returns (AuctionView[] memory) {
        AuctionView[] memory views = new AuctionView[](auctionCount);

        for (uint256 i = 0; i < auctionCount; i++) {
            Auction storage a = auctions[i];
            uint256 len = a.participants.length;
            uint256[] memory stakeList = new uint256[](len);

            for (uint256 j = 0; j < len; j++) {
                stakeList[j] = userStakes[i][a.participants[j]];
            }

            views[i] = AuctionView({
                matchId: a.matchId,
                team: a.team,
                endTime: a.endTime,
                highestBidder: a.highestBidder,
                highestStake: a.highestStake,
                finalized: a.finalized,
                participants: a.participants,
                stakes: stakeList,
                auctionOwner: a.auctionOwner
            });
        }

        return views;
    }
}
